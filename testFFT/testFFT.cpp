
// Cooley-Tukey FFT
#include <iostream>
#include <complex>
#include <stdio.h>

#define MAX 200

using namespace std;

#define M_PI 3.1415926535897932384

// Number of samples processed max (actual number set in NSAMPLES)
#define SAMPLES_COUNT   1024


int wave_samples[SAMPLES_COUNT] = {
127, 142, 156, 169, 182, 194, 204, 213, 221, 227, 231, 233, 234, 233, 230, 226, 221, 214, 207, 198, 189, 180, 171, 163, 154, 147, 140, 134, 130, 126, 124, 124, 124, 127, 130, 134, 139, 145, 152, 159, 166, 173, 179, 185, 190, 194, 196, 198, 198, 196, 193, 188, 181, 173, 164, 153, 142, 129, 116, 103, 89, 76, 63, 50, 39, 29, 20, 12, 7, 3, 0, 0, 1, 5, 10, 16, 24, 33, 43, 54, 66, 77, 89, 100, 111, 121, 130, 138, 145, 150, 154, 157, 158, 158, 156, 153, 150, 145, 139, 134, 127, 121, 116, 110, 105, 102, 99, 97, 97, 98, 101, 105, 110, 117, 125, 134, 144, 155, 166, 178, 189, 201, 212, 222, 231, 239, 245, 250, 254, 255, 255, 252, 248, 243, 235, 226, 216, 205, 192, 179, 166, 152, 139, 126, 113, 102, 91, 82, 74, 67, 62, 59, 57, 57, 59, 61, 65, 70, 76, 82, 89, 96, 103, 110, 116, 121, 125, 128, 131, 131, 131, 129, 125, 121, 115, 108, 101, 92, 84, 75, 66, 57, 48, 41, 34, 29, 25, 22, 21, 22, 24, 28, 34, 42, 51, 61, 73, 86, 99, 113, 128, 142, 156, 169, 182, 194, 204, 213, 221, 227, 231, 233, 234, 233, 230, 226, 221, 214, 207, 198, 189, 180, 171, 163, 154, 147, 140, 134, 130, 126, 124, 124, 124, 127, 130, 134, 139, 145, 152, 159, 166, 173, 179, 185, 190, 194, 196, 198, 198, 196, 193, 188, 181, 173, 164, 153, 142, 129, 116, 103, 89, 76, 63, 50, 39, 29, 20, 12, 7, 3, 0, 0, 1, 5, 10, 16, 24, 33, 43, 54, 66, 77, 89, 100, 111, 121, 130, 138, 145, 150, 154, 157, 158, 158, 156, 153, 150, 145, 139, 134, 127, 121, 116, 110, 105, 102, 99, 97, 97, 98, 101, 105, 110, 117, 125, 134, 144, 155, 166, 178, 189, 201, 212, 222, 231, 239, 245, 250, 254, 255, 255, 252, 248, 243, 235, 226, 216, 205, 192, 179, 166, 152, 139, 126, 113, 102, 91, 82, 74, 67, 62, 59, 57, 57, 59, 61, 65, 70, 76, 82, 89, 96, 103, 110, 116, 121, 125, 128, 131, 131, 131, 129, 125, 121, 115, 108, 101, 92, 84, 75, 66, 57, 48, 41, 34, 29, 25, 22, 21, 22, 24, 28, 34, 42, 51, 61, 73, 86, 99, 113, 128, 142, 156, 169, 182, 194, 204, 213, 221, 227, 231, 233, 234, 233, 230, 226, 221, 214, 207, 198, 189, 180, 171, 163, 154, 147, 140, 134, 130, 126, 124, 124, 124, 127, 130, 134, 139, 145, 152, 159, 166, 173, 179, 185, 190, 194, 196, 198, 198, 196, 193, 188, 181, 173, 164, 153, 142, 129, 116, 103, 89, 76, 63, 50, 39, 29, 20, 12, 7, 3, 0, 0, 1, 5, 10, 16, 24, 33, 43, 54, 66, 77, 89, 100, 111, 121, 130, 138, 145, 150, 154, 157, 158, 158, 156, 153, 150, 145, 139, 134, 127, 121, 116, 110, 105, 102, 99, 97, 97, 98, 101, 105, 110, 117, 125, 134, 144, 155, 166, 178, 189, 201, 212, 222, 231, 239, 245, 250, 254, 255, 255, 252, 248, 243, 235, 226, 216, 205, 192, 179, 166, 152, 139, 126, 113, 102, 91, 82, 74, 67, 62, 59, 57, 57, 59, 61, 65, 70, 76, 82, 89, 96, 103, 110, 116, 121, 125, 128, 131, 131, 131, 129, 125, 121, 115, 108, 101, 92, 84, 75, 66, 57, 48, 41, 34, 29, 25, 22, 21, 22, 24, 28, 34, 42, 51, 61, 73, 86, 99, 113, 128, 142, 156, 169, 182, 194, 204, 213, 221, 227, 231, 233, 234, 233, 230, 226, 221, 214, 207, 198, 189, 180, 171, 163, 154, 147, 140, 134, 130, 126, 124, 124, 124, 127, 130, 134, 139, 145, 152, 159, 166, 173, 179, 185, 190, 194, 196, 198, 198, 196, 193, 188, 181, 173, 164, 153, 142, 129, 116, 103, 89, 76, 63, 50, 39, 29, 20, 12, 7, 3, 0, 0, 1, 5, 10, 16, 24, 33, 43, 54, 66, 77, 89, 100, 111, 121, 130, 138, 145, 150, 154, 157, 158, 158, 156, 153, 150, 145, 139, 134, 127, 121, 116, 110, 105, 102, 99, 97, 97, 98, 101, 105, 110, 117, 125, 134, 144, 155, 166, 178, 189, 201, 212, 222, 231, 239, 245, 250, 254, 255, 255, 252, 248, 243, 235, 226, 216, 205, 192, 179, 166, 152, 139, 126, 113, 102, 91, 82, 74, 67, 62, 59, 57, 57, 59, 61, 65, 70, 76, 82, 89, 96, 103, 110, 116, 121, 125, 128, 131, 131, 131, 129, 125, 121, 115, 108, 101, 92, 84, 75, 66, 57, 48, 41, 34, 29, 25, 22, 21, 22, 24, 28, 34, 42, 51, 61, 73, 86, 99, 113, 128, 142, 156, 169, 182, 194, 204, 213, 221, 227, 231, 233, 234, 233, 230, 226, 221, 214, 207, 198, 189, 180, 171, 163, 154, 147, 140, 134, 130, 126, 124, 124, 124, 127, 130, 134, 139, 145, 152, 159, 166, 173, 179, 185, 190, 194, 196, 198, 198, 196, 193, 188, 181, 173, 164, 153, 142, 129, 116, 103, 89, 76, 63, 50, 39, 29, 20, 12, 7, 3, 0, 0, 1, 5, 10, 16, 24, 33, 43, 54, 66, 77, 89, 100, 111, 121, 130, 138, 145, 150, 154, 157, 158, 158, 156, 153, 150, 145, 139, 134, 127, 121, 116, 110, 105, 102, 99, 97, 97, 98, 101, 105, 110, 117, 125, 134, 144, 155, 166, 178, 189, 201, 212, 222, 231, 239, 245, 250, 254, 255, 255, 252, 248, 243, 235, 226, 216, 205, 192, 179, 166, 152, 139, 126, 113, 102, 91, 82, 74, 67, 62, 59, 57, 57, 59, 61, 65, 70, 76, 82, 89, 96, 103, 110, 116, 121, 125, 128, 131, 131, 131, 129, 125, 121, 115, 108, 101, 92, 84, 75, 66, 57, 48, 41, 34, 29, 25, 22, 21, 22, 24, 28, 34, 42, 51, 61, 73, 86, 99, 113, 127, 142, 156, 169, 182, 194, 204, 213, 221, 227, 231, 233, 234, 233, 230, 226, 221, 214, 207, 198, 189, 180, 171, 163
};

void print_array_to_file(const int *array, size_t length, const char *filename) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        perror("Unable to open file for writing");
        return;
    }

    fprintf(file, "static int wave_samples[] = {\n");

    for (size_t i = 0; i < length; ++i) {
        // Print the values with commas, except for the last value
        if (i != length - 1) {
            fprintf(file, "%d, ", array[i]);
        } else {
            fprintf(file, "%d", array[i]);
        }
    }

    fprintf(file, "\n};\n");

    fclose(file);
}

// Cooley-Tukey based fft (https://it.wikipedia.org/wiki/Trasformata_di_Fourier_veloce)
int log2(int N)    /*function to calculate the log2(.) of int numbers*/
{
  int k = N, i = 0;
  while(k) {
    k >>= 1;
    i++;
  }
  return i - 1;
}

int reverse(int N, int n)    //calculating revers number
{
  int j, p = 0;
  for(j = 1; j <= log2(N); j++) {
    if(n & (1 << (log2(N) - j)))
      p |= 1 << (j - 1);
  }
  return p;
}

void ordina(complex<double>* f1, int N) //using the reverse order in the array
{
  complex<double> f2[MAX];
  for(int i = 0; i < N; i++)
    f2[i] = f1[reverse(N, i)];
  for(int j = 0; j < N; j++)
    f1[j] = f2[j];
}

void transform(complex<double>* f, int N) //
{
  ordina(f, N);    //first: reverse order
  complex<double> *W;
  W = (complex<double> *)malloc(N / 2 * sizeof(complex<double>));
  W[1] = polar(1., -2. * M_PI / N);
  W[0] = 1;
  for(int i = 2; i < N / 2; i++)
    W[i] = pow(W[1], i);
  int n = 1;
  int a = N / 2;
  for(int j = 0; j < log2(N); j++) {
    for(int i = 0; i < N; i++) {
      if(!(i & n)) {
        complex<double> temp = f[i];
        complex<double> Temp = W[(i * a) % (n * a)] * f[i + n];
        f[i] = temp + Temp;
        f[i + n] = temp - Temp;
      }
    }
    n *= 2;
    a = a / 2;
  }
  free(W);
}

void FFT(complex<double>* f, int N, double d)
{
  transform(f, N);
  for(int i = 0; i < N; i++)
    f[i] *= d; //multiplying by step
}

int main(){

  FFT(wave_samples, SAMPLES_COUNT, 1);

  print_array_to_file(print_array_to_file, SAMPLES_COUNT, "postFFT.txt");

}